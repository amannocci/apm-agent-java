---
# Releases the agent
name: release

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'The branch to release'
        required: true
        default: 'main'
      version:
        description: 'The version to release (e.g. 1.2.3). This workflow will automatically perform the required version bumps'
        required: true

env:
  JAVA_VERSION: 17
  JAVA_DIST: temurin
  TAG_NAME: v${{ inputs.version }}

permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}

jobs:
  create_pr:
    permissions:
      contents: write
    name: "Changelog and Version Bump"
    runs-on: ubuntu-latest
    steps:
      - uses: elastic/apm-pipeline-library/.github/actions/github-token@current
        with:
          url: ${{ secrets.VAULT_ADDR }}
          roleId: ${{ secrets.VAULT_ROLE_ID }}
          secretId: ${{ secrets.VAULT_SECRET_ID }}
      - uses: elastic/apm-pipeline-library/.github/actions/setup-git@current
        with:
          username: ${{ env.GIT_USER }}
          email: ${{ env.GIT_EMAIL }}
          token: ${{ env.GITHUB_TOKEN }}
      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.branch }}
          token: ${{ env.GITHUB_TOKEN }}
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: ${{ env.JAVA_DIST }}
          cache: 'maven'
      - uses: elastic/apm-pipeline-library/.github/actions/manage-branch@feat/python-branch-lock
        with:
          lock: '"false, pattern: \"something\""'
          branch: 'main'
          token: ${{ secrets.PAT }}
      - name: Create a PR release branch
        run: git checkout -b release-from-pr-${{ inputs.version }}
      - name: Prepare changelog for release
        run: |
          java .ci/ReleaseChangelog.java CHANGELOG.asciidoc ${{ inputs.version }}
          git commit -m "Prepare changelog for release ${{ inputs.version }}" CHANGELOG.asciidoc
      - name: Bump version and add git tag
        run: ./mvnw release:prepare -B -DpushChanges=false -Darguments="-DskipTests -Dmaven.javadoc.skip=true" -DreleaseVersion=${{ inputs.version }}
      - name: Update Cloudfoundry index.yml file
        shell: bash
        run: .ci/release/update_cloudfoundry.sh ${{ inputs.version }}
      - name: Push PR release branch
        run: git push origin release-from-pr-${{ inputs.version }} --tags
      - name: Create Pull Request Release
        run: gh pr create --title="Release Version ${{ inputs.version }}" -l release --base main --head release-from-pr-${{ inputs.version }} -b "New Release ${{ inputs.version }}"

  maven_central_deploy:
    name: "Deploy to Maven Central (Buildkite)"
    runs-on: ubuntu-latest
    needs:
      - create_pr
    steps:
      - name: Placeholder for buildkite
        run: echo "Buildkite build"
      # TODO: Use buildkite instead of placeholder
#      - id: buildkite
#        continue-on-error: true
#        name: Run Deploy
#        uses: elastic/apm-pipeline-library/.github/actions/buildkite@current
#        with:
#          vaultUrl: ${{ secrets.VAULT_ADDR }}
#          vaultRoleId: ${{ secrets.VAULT_ROLE_ID }}
#          vaultSecretId: ${{ secrets.VAULT_SECRET_ID }}
#          pipeline: apm-agent-java-release
#          pipelineBranch: release-from-pr-${{ inputs.version }}
#          pipelineCommit: ${{ env.TAG_NAME }}
#          waitFor: true
#          printBuildLogs: false
#          # The action fails with .github/actions/buildkite/run.sh: line 24: 3: parameter missing.
#          # Which is an unexpected bug.
#          # Adding a random buildEnvVar to circumvent the behaviour.
#          buildEnvVars: |
#            something_something=true
#
#  notify:
#    if: always()
#    needs:
#      - prepare_release
#      - maven_central_deploy
#      - await_artifact_on_maven_central
#      - update_major_branch
#      - update_cloudfoundry
#      - build_and_push_docker_images
#      - publish_aws_lambda
#      - create_github_release
#    runs-on: ubuntu-latest
#    steps:
#      - id: check
#        uses: elastic/apm-pipeline-library/.github/actions/check-dependent-jobs@current
#        with:
#          needs: ${{ toJSON(needs) }}
#      - uses: elastic/apm-pipeline-library/.github/actions/notify-build-status@current
#        with:
#          status: ${{ steps.check.outputs.status }}
#          vaultUrl: ${{ secrets.VAULT_ADDR }}
#          vaultRoleId: ${{ secrets.VAULT_ROLE_ID }}
#          vaultSecretId: ${{ secrets.VAULT_SECRET_ID }}
#          slackChannel: "#apm-agent-java"
